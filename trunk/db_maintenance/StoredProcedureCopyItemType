-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `copyItemType`(IN originalItemTypeId INT(11))
BEGIN

DECLARE createdItemTypeId INTEGER;

DECLARE oldI18nName_id INTEGER;
DECLARE newI18nName_id INTEGER;

DECLARE oldI18nDescription_id INTEGER;
DECLARE newI18nDescription_id INTEGER;

DECLARE demolitionStepCursorFinished INTEGER DEFAULT 0;  
DECLARE originalDemolitionStepId INTEGER;
DECLARE newDemolitionStepId INTEGER;
DECLARE animationDurationVar INTEGER;
DECLARE animationFramesVar INTEGER;
DECLARE stepVar INTEGER;

DECLARE demolitionClipCursorFinished INTEGER DEFAULT 0;  
DECLARE originalDemolitionClipId INTEGER;
DECLARE newDemolitionClipId INTEGER;
DECLARE originaldbClipId INTEGER;

DECLARE oldMovableType_id INTEGER;
DECLARE newMovableType_id INTEGER;

DECLARE oldBuilderType_id INTEGER;
DECLARE newBuilderType_id INTEGER;

DECLARE oldWeaponType_id INTEGER;
DECLARE newWeaponType_id INTEGER;
DECLARE originalMuzzleNumber INTEGER;
DECLARE origWeaponTypeMuzzle_id INTEGER;
DECLARE newWeaponTypeMuzzle_id INTEGER;
DECLARE weaponCursorFinished INTEGER DEFAULT 0;  

DECLARE oldConsumerType_id INTEGER;
DECLARE newConsumerType_id INTEGER;

DECLARE oldGeneratorType_id INTEGER;
DECLARE newGeneratorType_id INTEGER;

DECLARE newHouseType_id INTEGER;
DECLARE oldHouseType_id INTEGER;

DECLARE newHarvesterType_id INTEGER;
DECLARE oldHarvesterType_id INTEGER;

DECLARE oldSpecialType_id INTEGER;
DECLARE newSpecialType_id INTEGER;

DECLARE oldFactoryType_id INTEGER;
DECLARE newFactoryType_id INTEGER;

DECLARE oldItemContainerType_id INTEGER;
DECLARE newItemContainerType_id INTEGER;

DECLARE demolitionStepCursor CURSOR FOR SELECT id, animationDuration, animationFrames, step FROM ITEM_TYPE_DEMOLITION_STEP WHERE itemType_id = originalItemTypeId;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET demolitionStepCursorFinished = 1;

INSERT INTO ITEM_TYPE(TYPE, imageHeight, name, terrainType, 
imageWidth, amount, buildup, damage, explosionRadius, 
price, theRange, speed, health, upgradeProgress,
ttl, boxPickupRange, dropBoxPossibility, dbBoxItemType_id, 
buildupAnimationDuration, buildupAnimationFrames, buildupSteps, 
runtimeAnimationDuration, runtimeAnimationFrames, buildupSound_id, 
commandSound_id,  selectionSound_id, consumingHouseSpace, xpOnKilling, 
boundingBoxRadius, explosionClip_id, unlockCrystals) SELECT TYPE, imageHeight, CONCAT('Copy of ', name), terrainType, 
imageWidth, amount, buildup, damage, explosionRadius, 
price, theRange, speed, health, upgradeProgress,
ttl, boxPickupRange, dropBoxPossibility, dbBoxItemType_id, 
buildupAnimationDuration, buildupAnimationFrames, buildupSteps, 
runtimeAnimationDuration, runtimeAnimationFrames, buildupSound_id, 
commandSound_id,  selectionSound_id, consumingHouseSpace, xpOnKilling, 
boundingBoxRadius, explosionClip_id, unlockCrystals FROM ITEM_TYPE WHERE id = originalItemTypeId;

SET createdItemTypeId = LAST_INSERT_ID();

-- ***************** I18n strings ***************** 
-- dbI18nName_id
SELECT dbI18nName_id INTO oldI18nName_id FROM ITEM_TYPE WHERE id = originalItemTypeId; 
IF oldI18nName_id IS NOT NULL THEN
  INSERT INTO I18N_BUNDLE() VALUES();
  SET newI18nName_id = LAST_INSERT_ID();
  INSERT INTO I18N_STRING(bundle, i18nString, locale) SELECT newI18nName_id, i18nString, locale FROM I18N_STRING WHERE bundle = oldI18nName_id; 
  UPDATE ITEM_TYPE SET dbI18nName_id = newI18nName_id WHERE id = createdItemTypeId; 
END IF;  

-- dbI18nDescription_id
SELECT dbI18nDescription_id INTO oldI18nDescription_id FROM ITEM_TYPE WHERE id = originalItemTypeId; 
IF oldI18nDescription_id IS NOT NULL THEN
  INSERT INTO I18N_BUNDLE() VALUES();
  SET newI18nDescription_id = LAST_INSERT_ID();
  INSERT INTO I18N_STRING(bundle, i18nString, locale) SELECT newI18nDescription_id, i18nString, locale FROM I18N_STRING WHERE bundle = oldI18nDescription_id; 
  UPDATE ITEM_TYPE SET dbI18nDescription_id = newI18nDescription_id WHERE id = createdItemTypeId;
END IF;  

-- ***************** Abilities ***************** 
-- dbMovableType_id
SELECT dbMovableType_id INTO oldMovableType_id FROM ITEM_TYPE WHERE id = originalItemTypeId; 
IF oldMovableType_id IS NOT NULL THEN
  INSERT INTO ITEM_MOVABLE_TYPE(speed) SELECT speed FROM ITEM_MOVABLE_TYPE WHERE id = oldMovableType_id;
  SET newMovableType_id = LAST_INSERT_ID();
  UPDATE ITEM_TYPE SET dbMovableType_id = newMovableType_id WHERE id = createdItemTypeId; 
END IF;  

-- dbBuilderType
SELECT dbBuilderType_id INTO oldBuilderType_id FROM ITEM_TYPE WHERE id = originalItemTypeId; 
IF oldBuilderType_id IS NOT NULL THEN
  INSERT INTO ITEM_BUILDER_TYPE(progress, theRange) SELECT progress, theRange FROM ITEM_BUILDER_TYPE WHERE id = oldBuilderType_id;
  SET newBuilderType_id = LAST_INSERT_ID();
  INSERT INTO ITEM_BUILDER_TYPE_ABLE_TO_BUILD(builderId, itemTypeId) SELECT newBuilderType_id, itemTypeId FROM ITEM_BUILDER_TYPE_ABLE_TO_BUILD WHERE builderId = oldBuilderType_id; 
  UPDATE ITEM_TYPE SET dbBuilderType_id = newBuilderType_id WHERE id = createdItemTypeId; 
END IF; 

-- item_weapon_type
SELECT dbWeaponType_id INTO oldWeaponType_id FROM ITEM_TYPE WHERE id = originalItemTypeId; 
IF oldWeaponType_id IS NOT NULL THEN
	INSERT INTO ITEM_WEAPON_TYPE(damage, theRange, reloadTime, projectileSpeed, muzzleFlashClip_id, projectileClip_id, projectileDetonationClip_id) 
		SELECT damage, theRange, reloadTime, projectileSpeed, muzzleFlashClip_id, projectileClip_id, projectileDetonationClip_id FROM ITEM_WEAPON_TYPE WHERE id = oldWeaponType_id;
	SET newWeaponType_id = LAST_INSERT_ID();
	INSERT INTO ITEM_WEAPON_TYPE_ALLOWED_ITEM_TYPE(weaponItemTypeId, allowedItemTypeId) 
		SELECT newWeaponType_id, allowedItemTypeId FROM ITEM_WEAPON_TYPE_ALLOWED_ITEM_TYPE WHERE weaponItemTypeId = oldWeaponType_id; 
  
    WEAPON_BLOCK: BEGIN
		DECLARE weaponTypeMuzzleCursor CURSOR FOR SELECT id, muzzleNumber FROM ITEM_WEAPON_TYPE_MUZZLE WHERE weaponType_id = oldWeaponType_id;
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET weaponCursorFinished = 1;
		OPEN weaponTypeMuzzleCursor;
		readWeaponTypeMuzzle: LOOP
			FETCH weaponTypeMuzzleCursor INTO origWeaponTypeMuzzle_id, originalMuzzleNumber;
			IF weaponCursorFinished = 1 THEN 
				LEAVE readWeaponTypeMuzzle;
			END IF;
			INSERT INTO ITEM_WEAPON_TYPE_MUZZLE(muzzleNumber, weaponType_id) VALUES (originalMuzzleNumber, newWeaponType_id);
			SET newWeaponTypeMuzzle_id = LAST_INSERT_ID();
			INSERT INTO ITEM_WEAPON_TYPE_MUZZLE_POSITION(imageNumber, xPos, yPos, weaponTypeMuzzle_id) 
				SELECT imageNumber, xPos, yPos, newWeaponTypeMuzzle_id FROM ITEM_WEAPON_TYPE_MUZZLE_POSITION WHERE weaponTypeMuzzle_id = origWeaponTypeMuzzle_id; 
		END LOOP readWeaponTypeMuzzle;
		CLOSE weaponTypeMuzzleCursor;
    END WEAPON_BLOCK;
	UPDATE ITEM_TYPE SET dbWeaponType_id = newWeaponType_id WHERE id = createdItemTypeId; 
END IF; 

-- dbConsumerType_id
SELECT dbConsumerType_id INTO oldConsumerType_id FROM ITEM_TYPE WHERE id = originalItemTypeId; 
IF oldConsumerType_id IS NOT NULL THEN
  INSERT INTO ITEM_CONSUMER_TYPE(wattage) SELECT wattage FROM ITEM_CONSUMER_TYPE WHERE id = oldConsumerType_id;
  SET newConsumerType_id = LAST_INSERT_ID();
  UPDATE ITEM_TYPE SET dbConsumerType_id = oldConsumerType_id WHERE id = createdItemTypeId; 
END IF;  

-- dbGeneratorType_id
SELECT dbGeneratorType_id INTO oldGeneratorType_id FROM ITEM_TYPE WHERE id = originalItemTypeId; 
IF oldGeneratorType_id IS NOT NULL THEN
  INSERT INTO ITEM_GENERATOR_TYPE(wattage) SELECT wattage FROM ITEM_GENERATOR_TYPE WHERE id = oldGeneratorType_id;
  SET newGeneratorType_id = LAST_INSERT_ID();
  UPDATE ITEM_TYPE SET dbGeneratorType_id = newGeneratorType_id WHERE id = createdItemTypeId; 
END IF;  

-- dbHouseType_id
SELECT dbHouseType_id INTO oldHouseType_id FROM ITEM_TYPE WHERE id = originalItemTypeId; 
IF oldHouseType_id IS NOT NULL THEN
  INSERT INTO ITEM_HOUSE_TYPE(space) SELECT space FROM ITEM_HOUSE_TYPE WHERE id = oldHouseType_id;
  SET newHouseType_id = LAST_INSERT_ID();
  UPDATE ITEM_TYPE SET dbHouseType_id = newHouseType_id WHERE id = createdItemTypeId; 
END IF;  

-- dbHarvesterType_id
SELECT dbHarvesterType_id INTO oldHarvesterType_id FROM ITEM_TYPE WHERE id = originalItemTypeId; 
IF oldHarvesterType_id IS NOT NULL THEN
  INSERT INTO ITEM_HARVESTER_TYPE(progress, theRange) SELECT progress, theRange FROM ITEM_HARVESTER_TYPE WHERE id = oldHarvesterType_id;
  SET newHarvesterType_id = LAST_INSERT_ID();
  UPDATE ITEM_TYPE SET dbHarvesterType_id = newHarvesterType_id WHERE id = createdItemTypeId; 
END IF;  

-- dbSpecialType_id
SELECT dbSpecialType_id INTO oldSpecialType_id FROM ITEM_TYPE WHERE id = originalItemTypeId; 
IF oldSpecialType_id IS NOT NULL THEN
  INSERT INTO ITEM_SPECIAL_TYPE(radarMode) SELECT radarMode FROM ITEM_SPECIAL_TYPE WHERE id = oldSpecialType_id;
  SET newSpecialType_id = LAST_INSERT_ID();
  UPDATE ITEM_TYPE SET dbSpecialType_id = newSpecialType_id WHERE id = createdItemTypeId; 
END IF;  

-- dbFactoryType_id
SELECT dbFactoryType_id INTO oldFactoryType_id FROM ITEM_TYPE WHERE id = originalItemTypeId; 
IF oldFactoryType_id IS NOT NULL THEN
  INSERT INTO ITEM_FACTORY_TYPE(progress) SELECT progress FROM ITEM_FACTORY_TYPE WHERE id = oldFactoryType_id;
  SET newFactoryType_id = LAST_INSERT_ID();
  INSERT INTO ITEM_FACTORY_TYPE_ABLE_TO_BUILD(factoryId, itemTypeId) SELECT newFactoryType_id, itemTypeId FROM ITEM_FACTORY_TYPE_ABLE_TO_BUILD WHERE factoryId = oldFactoryType_id; 
  UPDATE ITEM_TYPE SET dbFactoryType_id = newFactoryType_id WHERE id = createdItemTypeId; 
END IF; 

-- dbItemContainerType_id
SELECT dbItemContainerType_id INTO oldItemContainerType_id FROM ITEM_TYPE WHERE id = originalItemTypeId; 
IF oldItemContainerType_id IS NOT NULL THEN
  INSERT INTO ITEM_ITEM_CONTAINER_TYPE(maxCount, theRange) SELECT maxCount, theRange FROM ITEM_ITEM_CONTAINER_TYPE WHERE id = oldItemContainerType_id;
  SET newItemContainerType_id = LAST_INSERT_ID();
  INSERT INTO ITEM_ITEM_CONTAINER_TYPE_ABLE_TO_CONTAIN(containId, itemTypeId) SELECT newItemContainerType_id, itemTypeId FROM ITEM_ITEM_CONTAINER_TYPE_ABLE_TO_CONTAIN WHERE containId = oldItemContainerType_id; 
  UPDATE ITEM_TYPE SET dbItemContainerType_id = newItemContainerType_id WHERE id = createdItemTypeId; 
END IF; 

-- ***************** Bounding box & images ***************** 
-- itemTypeImages
INSERT INTO ITEM_TYPE_IMAGE (contentType, data, angelIndex, itemType_id, frame, step, type) 
  SELECT contentType, data, angelIndex, createdItemTypeId, frame, step, type FROM ITEM_TYPE_IMAGE WHERE itemType_id = originalItemTypeId;

-- angels
INSERT INTO ITEM_TYPE_ANGELS (itemTypeId, angel) 
  SELECT createdItemTypeId, angel FROM ITEM_TYPE_ANGELS WHERE itemTypeId = originalItemTypeId;

-- demolition
OPEN demolitionStepCursor;
readDemolitionStep: LOOP
	FETCH demolitionStepCursor INTO originalDemolitionStepId, animationDurationVar, animationFramesVar, stepVar;
	IF demolitionStepCursorFinished = 1 THEN 
		LEAVE readDemolitionStep;
	END IF;

	INSERT INTO ITEM_TYPE_DEMOLITION_STEP (animationDuration, animationFrames, step, itemType_id) VALUES (animationDurationVar, animationFramesVar, stepVar, createdItemTypeId);
	SET newDemolitionStepId = LAST_INSERT_ID(); 
    
    CLIP_BLOCK: BEGIN
    DECLARE demolitionClipCursor CURSOR FOR SELECT id, dbClip_id FROM ITEM_TYPE_DEMOLITION_CLIP WHERE dbItemTypeDemolitionStep_id = originalDemolitionStepId;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET demolitionClipCursorFinished = 1;
    OPEN demolitionClipCursor;
    SET demolitionClipCursorFinished = 0;
    readDemolitionClip: LOOP
		FETCH demolitionClipCursor INTO originalDemolitionClipId, originaldbClipId;
 		IF demolitionClipCursorFinished = 1 THEN 
 			LEAVE readDemolitionClip;
 		END IF;

 		INSERT INTO ITEM_TYPE_DEMOLITION_CLIP (dbClip_id, dbItemTypeDemolitionStep_id) VALUES (originaldbClipId, newDemolitionStepId);
 	    SET newDemolitionClipId = LAST_INSERT_ID(); 

 		INSERT INTO ITEM_TYPE_DEMOLITION_CLIP_POSITION (itemTypeDemolitionClipId, xPos, yPos)
 			SELECT newDemolitionClipId, xPos, yPos FROM ITEM_TYPE_DEMOLITION_CLIP_POSITION WHERE itemTypeDemolitionClipId = originalDemolitionClipId; 

 	END LOOP readDemolitionClip;
 	CLOSE demolitionClipCursor;
	END CLIP_BLOCK;

END LOOP readDemolitionStep;
CLOSE demolitionStepCursor;
END